{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Dev Notes","text":"<p>Welcome to My Dev Notes \ud83d\udc4b</p> <p>This site contains my personal development notes, cheatsheets, and useful commands.</p>"},{"location":"docker/docker-cheatsheet/","title":"Docker Cheatsheet","text":""},{"location":"docker/docker-cheatsheet/#container","title":"Container","text":"<p>Running a container:</p> <p><code>docker container run image:tag</code></p> <p>Example: <code>docker container run nginx:latest</code></p> <p>Running a container in detached mode (-d):</p> <p><code>docker container run -d image:tag</code></p> <p>Example: <code>docker container run -d nginx:latest</code></p> <p>Starting a container with a different command instead of the default:</p> <p><code>docker container run image:tag command</code></p> <p>Example: <code>docker container run ubuntu:latest ping 127.0.0.1</code></p> <p>Running a container with a given name:</p> <p><code>docker container run --name name image:tag</code></p> <p>Example: <code>docker container run --name container1 -d nginx:latest</code></p> <p>Running another command inside a running container:</p> <p><code>docker container exec container_id|or|container_name command</code></p> <p>Example: <code>docker container exec 12a793b3fec0 ping 127.0.0.1</code></p> <p>Opening a shell inside a running container:</p> <p><code>docker container exec -it container_id|or|container_name sh</code></p> <p>Example: <code>docker container exec -it 12a793b3fec0 sh</code></p> <p>Creating a container with detached mode and shell connection (dit):</p> <p><code>docker container run -dit image:tag sh</code></p> <p>Example: <code>docker container run -dit nginx:latest sh</code></p> <p>Attaching to a container created with detached mode and shell:</p> <p><code>docker attach container_id|or|container_name</code></p> <p>Example: <code>docker attach 12a793b3fec0</code></p> <p>Stopping a container:</p> <p><code>docker container stop container_id|or|container_name</code></p> <p>Example: <code>docker container stop 12a793b3fec0</code></p> <p>Removing a container:</p> <p><code>docker container rm container_id|or|container_name</code></p> <p>Example: <code>docker container rm 12a793b3fec0</code></p> <p>Removing a running container (-f):</p> <p><code>docker container rm -f container_id|or|container_name</code></p> <p>Example: <code>docker container rm -f 12a793b3fec0</code></p> <p>Automatically remove container on exit (-rm):</p> <p><code>docker container run -rm image:tag</code></p> <p>Example: <code>docker container run -rm nginx:latest</code> (with -rm the container is automatically removed after stopping)</p> <p>Inspecting container details:</p> <p><code>docker container inspect container_id|or|container_name</code></p> <p>Example: <code>docker container inspect 12a793b3fec0</code></p> <p>Removing all containers (running and stopped) in the system:</p> <p><code>docker container rm -f $(docker ps -aq)</code></p> <p>Listing running containers:</p> <p><code>docker container ls</code> or</p> <p><code>docker container ps</code></p> <p>Listing all containers:</p> <p><code>docker container ls -a</code> or</p> <p><code>docker container ps -a</code></p> <p>Listing processes inside a running container:</p> <p><code>docker top container_id|or|container_name</code></p> <p>Example: <code>docker top 12a793b3fec0</code></p> <p>Viewing CPU, RAM, I/O usage of a running container:</p> <p><code>docker stats container_id|or|container_name</code></p> <p>Example: <code>docker stats 12a793b3fec0</code></p> <p>Limiting container memory usage (--memory, --memory-swap):</p> <p><code>docker container run --memory=value(b,k,m,g) --memory-swap=value(b,k,m,g) image:tag</code></p> <p>Example: <code>docker container run --memory=1g --memory-swap=2g nginx:latest</code> (With memory-swap you can also define swap space. b=byte, k=kilobyte, m=megabyte, g=gigabyte)</p> <p>Limiting container CPU usage (--cpus, --cpuset-cpus):</p> <p><code>docker container run --cpus=\"number_of_cores\" image:tag</code></p> <p>Example: <code>docker container run --cpus=\"3\" nginx:latest</code> (This limits the number of CPU cores the container can use)</p> <p><code>docker container run --cpuset-cpus=\"core_numbers\" image:tag</code></p> <p>Example: <code>docker container run --cpuset-cpus=\"0,4\" nginx:latest</code> (This sets which CPU cores the container can access)</p> <p>Setting environment variables for a container:</p> <p><code>docker container run --env environment_variable=value image:tag</code></p> <p>Example: <code>docker container run --env VAR1=test1 --env VAR2=test2 nginx:latest</code></p> <p>Copying files between container and host (both directions):</p> <p><code>docker cp container_id|or|container_name:path host_path</code></p> <p>Example: <code>docker cp 12a793b3fec0:/usr/src/app/ .</code></p>"},{"location":"docker/docker-cheatsheet/#image","title":"Image","text":"<p>Logging into a registry via Docker CLI:</p> <p><code>docker login registry_url</code></p> <p>Example: <code>docker login localhost:8080</code></p> <p>Pulling an image to the system:</p> <p><code>docker image pull image:tag</code></p> <p>Example: <code>docker image pull nginx:latest</code></p> <p>Pushing an image to Docker Hub (or another repository):</p> <p><code>docker image push repository/image:tag</code></p> <p>Example: <code>docker image push ozgurozturknet/adanzyedocker:latest</code></p> <p>Tagging an existing image with a new tag:</p> <p><code>docker image tag image:tag newimage:tag</code></p> <p>Example: <code>docker image tag nginx:latest ozgurozturknet/nginx:v1</code></p> <p>Inspecting image details:</p> <p><code>docker image inspect image:tag</code></p> <p>Example: <code>docker image inspect nginx:latest</code></p> <p>Listing image layers:</p> <p><code>docker image history image:tag</code></p> <p>Example: <code>docker image history nginx:latest</code></p> <p>Building a new image using Dockerfile:</p> <p><code>docker image build -t image:tag .</code></p> <p>Example: <code>docker image build -t ozgurozturknet/hello-world:latest .</code> (Dockerfile must be in the folder where this command is run)</p> <p>Using build args when building image:</p> <p><code>docker image build --build-arg arg=value -t image:tag .</code></p> <p>Example: <code>docker image build --build-arg VERSION=3.7.1 -t nginx:latest .</code></p> <p>Listing all images in the system:</p> <p><code>docker image ls</code></p> <p>Removing an image from the system:</p> <p><code>docker image rm image:tag</code></p> <p>Example: <code>docker image rm nginx:latest</code></p> <p>Creating an image from a container:</p> <p><code>docker commit container_id|or|container_name image:tag</code></p> <p>Example: <code>docker commit 12a793b3fec0 ozgurozturknet/img:latest</code></p> <p>Saving an image to a file and loading an image from a saved file:</p> <p><code>docker save image:tag -o filename.tar</code></p> <p>Example: <code>docker save ozgurozturknet/img:latest -o image.tar</code></p> <p><code>docker load -i filename.tar</code></p> <p>Example: <code>docker load -i imagecon1.tar</code></p>"},{"location":"docker/docker-cheatsheet/#volume","title":"Volume","text":"<p>Creating a volume:</p> <p><code>docker volume create volume_name</code></p> <p>Example: <code>docker volume create firstvolume</code></p> <p>Inspecting volume details:</p> <p><code>docker volume inspect volume_id|or|volume_name</code></p> <p>Example: <code>docker volume inspect firstvolume</code></p> <p>Listing all volumes in the system:</p> <p><code>docker volume ls</code></p> <p>Mounting a volume to a container (-v):</p> <p><code>docker container run -v volume_name:container_path image:tag</code></p> <p>Example: <code>docker container run -v firstvolume:/var/www/html image:tag</code></p> <p>Mounting a volume as read-only (:ro):</p> <p><code>docker container run -v volume_name:container_path:ro image:tag</code></p> <p>Example: <code>docker container run -v firstvolume:/var/www/html:ro image:tag</code></p> <p>Binding a host folder or file as a mount:</p> <p><code>docker container run -v host_folder_path:container_path image:tag</code></p> <p>Example: <code>docker container run -v c:\\websites:/usr/share/nginx/html nginx:latest</code></p> <p>Removing a volume:</p> <p><code>docker volume rm volume_name</code></p> <p>Example: <code>docker volume rm firstvolume</code></p>"},{"location":"docker/docker-cheatsheet/#network","title":"Network","text":"<p>Creating a user-defined bridge network (bridge):</p> <p><code>docker network create --driver=bridge network_name</code></p> <p>Example: <code>docker network create --driver=bridge bridge-net</code></p> <p>Creating a user-defined bridge network with IP settings:</p> <p><code>docker network create --driver=bridge --subnet=cidr --ip-range=cidr --gateway=ip_address network_name</code></p> <p>Example: <code>docker network create --driver=bridge --subnet=10.10.0.0/16 --ip-range=10.10.10.0/24 --gateway=10.10.10.10 bridge-net</code></p> <p>Listing all networks in the system:</p> <p><code>docker network ls</code></p> <p>Inspecting network details:</p> <p><code>docker network inspect network_name</code></p> <p>Example: <code>docker network inspect bridge-net</code></p> <p>Running a container connected to a non-default network:</p> <p><code>docker container run --network network_name image:tag</code></p> <p>Example: <code>docker container run --network bridge-net nginx:latest</code></p> <p>Connecting a running container to another network:</p> <p><code>docker network connect network_name container_id|or|container_name</code></p> <p>Example: <code>docker network connect bridge-net 12a793b3fec0</code></p> <p>Disconnecting a running container from a network:</p> <p><code>docker network disconnect network_name container_id|or|container_name</code></p> <p>Example: <code>docker network disconnect bridge-net 12a793b3fec0</code></p> <p>Running a container with published ports (-p):</p> <p><code>docker container run -p host_port:container_port/tcp_or_udp image:tag</code></p> <p>Example: <code>docker container run -p 8080:80 -p 53:53/udp nginx:latest</code></p>"},{"location":"docker/docker-cheatsheet/#logging","title":"Logging","text":"<p>Viewing logs created by a container:</p> <p><code>docker logs container_id|or|container_name</code></p> <p>Example: <code>docker logs 12a793b3fec0</code></p> <p>Viewing detailed logs in long format:</p> <p><code>docker logs --details container_id|or|container_name</code></p> <p>Example: <code>docker logs --details 12a793b3fec0</code></p> <p>Viewing logs within a specific date range:</p> <p><code>docker logs --since date_time --until date_time container_id|or|container_name</code></p> <p>Example: <code>docker logs --since 2020-01-13T11:34:43.154304300Z 12a793b3fec0</code> (since shows logs from the given time, until shows logs up to the given time)</p> <p>Viewing last N log entries:</p> <p><code>docker logs --tail number container_id|or|container_name</code></p> <p>Example: <code>docker logs --tail 10 12a793b3fec0</code> (lists the last 10 log entries)</p> <p>Following logs live:</p> <p><code>docker logs -f container_id|or|container_name</code></p> <p>Example: <code>docker logs -f 12a793b3fec0</code> (logs will show live as they occur; use Ctrl-C to exit)</p>"},{"location":"docker/docker-cli/","title":"Docker Command Reference","text":""},{"location":"docker/docker-cli/#image-commands","title":"Image Commands","text":"<ul> <li><code>docker build</code> \u2014 Build an image from a Dockerfile</li> <li><code>docker images</code> \u2014 List images</li> <li><code>docker rmi</code> \u2014 Remove one or more images</li> <li><code>docker tag</code> \u2014 Tag an image for a repository</li> </ul>"},{"location":"docker/docker-cli/#container-commands","title":"Container Commands","text":"<ul> <li><code>docker run</code> \u2014 Run a container</li> <li><code>docker ps</code> \u2014 List running containers</li> <li><code>docker stop</code> \u2014 Stop one or more running containers</li> <li><code>docker start</code> \u2014 Start one or more stopped containers</li> <li><code>docker restart</code> \u2014 Restart containers</li> <li><code>docker rm</code> \u2014 Remove one or more containers</li> <li><code>docker exec</code> \u2014 Run a command inside a running container</li> <li><code>docker logs</code> \u2014 Fetch logs from a container</li> </ul>"},{"location":"docker/docker-cli/#volume-commands","title":"Volume Commands","text":"<ul> <li><code>docker volume create</code> \u2014 Create a volume</li> <li><code>docker volume ls</code> \u2014 List volumes</li> <li><code>docker volume rm</code> \u2014 Remove a volume</li> </ul>"},{"location":"docker/docker-cli/#network-commands","title":"Network Commands","text":"<ul> <li><code>docker network create</code> \u2014 Create a network</li> <li><code>docker network ls</code> \u2014 List networks</li> <li><code>docker network rm</code> \u2014 Remove a network</li> </ul>"},{"location":"docker/docker-cli/#system-commands","title":"System Commands","text":"<ul> <li><code>docker system prune</code> \u2014 Remove unused data</li> <li><code>docker info</code> \u2014 Display system-wide information</li> <li><code>docker version</code> \u2014 Show Docker version info</li> </ul>"},{"location":"docker/docker-compose/","title":"Docker Compose Commands","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. Below are some common Docker Compose commands with explanations using the new <code>docker compose</code> syntax.</p>"},{"location":"docker/docker-compose/#starting-services","title":"Starting Services","text":"<pre><code>docker compose up\n</code></pre> <ul> <li>Builds, (re)creates, starts, and attaches to containers for a service defined in <code>docker-compose.yml</code>.</li> </ul>"},{"location":"docker/docker-compose/#starting-services-in-detached-mode","title":"Starting Services in Detached Mode","text":"<pre><code>docker compose up -d\n</code></pre> <ul> <li>Starts the containers in the background (detached mode).</li> </ul>"},{"location":"docker/docker-compose/#stopping-services","title":"Stopping Services","text":"<pre><code>docker compose down\n</code></pre> <ul> <li>Stops and removes containers, networks, volumes, and images created by <code>docker compose up</code>.</li> </ul>"},{"location":"docker/docker-compose/#viewing-running-containers","title":"Viewing Running Containers","text":"<pre><code>docker compose ps\n</code></pre> <ul> <li>Lists containers started by <code>docker compose</code>.</li> </ul>"},{"location":"docker/docker-compose/#viewing-logs","title":"Viewing Logs","text":"<pre><code>docker compose logs\n</code></pre> <ul> <li>Shows output logs from containers.</li> </ul>"},{"location":"docker/docker-compose/#rebuilding-services","title":"Rebuilding Services","text":"<pre><code>docker compose build\n</code></pre> <ul> <li>Builds or rebuilds services.</li> </ul>"},{"location":"docker/docker-compose/#restarting-services","title":"Restarting Services","text":"<pre><code>docker compose restart\n</code></pre> <ul> <li>Restarts running containers.</li> </ul>"},{"location":"docker/docker-compose/#stopping-services-without-removing-containers","title":"Stopping Services Without Removing Containers","text":"<pre><code>docker compose stop\n</code></pre> <ul> <li>Stops running containers but does not remove them.</li> </ul>"},{"location":"docker/docker-compose/#summary","title":"Summary","text":"Command Description <code>docker compose up</code> Start and attach to containers <code>docker compose up -d</code> Start containers in detached mode <code>docker compose down</code> Stop and remove containers and networks <code>docker compose ps</code> List containers <code>docker compose logs</code> Show container logs <code>docker compose build</code> Build or rebuild services <code>docker compose restart</code> Restart running containers <code>docker compose stop</code> Stop containers without removing them <p>For more info, visit the official docs: https://docs.docker.com/compose/</p>"},{"location":"git/git-cheatsheet/","title":"Git Cheatsheet","text":""},{"location":"git/git-cheatsheet/#setup-and-configuration","title":"Setup and Configuration","text":"<p>Set user name:</p> <p><code>git config --global user.name \"yourusername\"</code></p> <p>Set user email:</p> <p><code>git config --global user.email \"youremail@mail.com\"</code></p> <p>Manage Personal Access Token info: GitHub PAT Docs</p>"},{"location":"git/git-cheatsheet/#repository-initialization","title":"Repository Initialization","text":"<p>Initialize Git repository:</p> <p><code>git init</code></p> <p>Clone repository:</p> <ul> <li> <p>Via https: <code>git clone https://github.com/yourusername/yourrepo.git your-new-directory</code></p> </li> <li> <p>Via ssh: <code>git clone git@github.com:yourusername/yourrepo.git your-new-directory</code></p> </li> </ul>"},{"location":"git/git-cheatsheet/#staging-and-committing","title":"Staging and Committing","text":"<p>Check the status of changes:</p> <p><code>git status</code></p> <p>Stage a file:</p> <p><code>git add README.md</code></p> <p>Stage multiple files:</p> <p><code>git add README.md index.html</code></p> <p>Stage all changes (excluding ignored):</p> <p><code>git add *</code></p> <p>or</p> <p><code>git add .</code></p> <p>Unstage a file:</p> <p><code>git rm --cached .vscode</code></p> <p>Unstage multiple files:</p> <p><code>git rm --cached -r .vscode/ bin/</code></p> <p>Unstage all files:</p> <p><code>git rm -r --cached .</code></p> <p>Commit with the message:</p> <p><code>git commit -m \"initial commit\"</code></p> <p>Amend last commit with staged changes:</p> <p><code>git commit --amend --all</code></p> <p>Change commit message:</p> <p><code>git commit -am \"updated commit\" --amend</code></p>"},{"location":"git/git-cheatsheet/#branching-and-merging","title":"Branching and Merging","text":"<p>List branches:</p> <p><code>git branch</code></p> <p>Create new branch:</p> <p><code>git branch feature-restructure</code></p> <p>Create the new branch and switch to it:</p> <p><code>git checkout -b feature-restructure</code></p> <p>Delete branch:</p> <p><code>git branch -D feature-restructure</code></p> <p>Rename branch:</p> <p><code>git branch -m feature-new-name</code></p> <p>Switch branch:</p> <p><code>git checkout $branch_name</code></p> <p>Merge branch into current branch:</p> <p><code>git merge feature-restructure</code></p>"},{"location":"git/git-cheatsheet/#working-with-commits","title":"Working with Commits","text":"<p>View commit history:</p> <p><code>git log</code></p> <p>Checkout specific commit:</p> <p><code>git checkout $commit_id</code></p> <p>Hard reset to commit (WARNING: discards changes):</p> <p><code>git reset --hard $commit_id</code></p> <p>Soft reset to commit:</p> <p><code>git reset --soft HEAD~</code></p> <p>Unstage file with restore:</p> <p><code>git restore --staged index.html</code></p> <p>Discard changes in working directory:</p> <p><code>git restore index.html</code></p>"},{"location":"git/git-cheatsheet/#remote-repositories","title":"Remote Repositories","text":"<p>Add remote URL:</p> <p><code>git remote add origin https://github.com/yourusername/yourrepo.git</code></p> <p>Remove remote URL:</p> <p><code>git remote remove origin</code></p> <p>Change remote URL:</p> <p><code>git remote set-url origin https://github.com/yourusername/yourrepo.git</code></p> <p>Show remote URL:</p> <p><code>git remote get-url origin</code></p>"},{"location":"git/git-cheatsheet/#pushing-and-pulling","title":"Pushing and Pulling","text":"<p>Push to remote branch:</p> <p><code>git push origin master</code></p> <p>Push and set upstream:</p> <p><code>git push --set-upstream origin main</code></p> <p>Push after the upstream set:</p> <p><code>git push</code></p> <p>Pull with rebase:</p> <p><code>git pull --rebase origin master</code></p> <p>Set upstream branch for current branch:</p> <p><code>git branch --set-upstream-to=origin/master</code></p> <p>Pull after the upstream set:</p> <p><code>git pull</code></p>"},{"location":"git/git-cheatsheet/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Skip CI workflow by adding <code>[skip ci]</code> in the commit message</li> </ul> <p>Add <code>[skip ci]</code> anywhere in your git commit message to skip CI workflows.</p>"},{"location":"git/github-actions/","title":"GitHub Actions","text":""},{"location":"git/github-actions/#useful-links","title":"Useful Links","text":"<ul> <li>GitHub Actions Runners</li> <li>GitHub Actions Events</li> <li>GitHub Actions Events Filters</li> <li>GitHub Actions Workflow Skip</li> <li>GitHub Actions Contexts</li> <li>GitHub Actions Expressions</li> <li>GitHub Actions Workflow Syntax</li> <li>GitHub Actions Default Environment Variables</li> <li>GitHub Actions Reuse Workflows</li> </ul>"},{"location":"git/github-actions/#storing-actions-in-repositories-sharing-actions-with-others","title":"Storing Actions in Repositories &amp; Sharing Actions with Others","text":"<p>In this section, we explain how to create and share custom Actions stored in separate repositories, instead of keeping them inside the same repository as your workflows.</p>"},{"location":"git/github-actions/#how-to-create-and-share-a-custom-action-in-its-own-repository","title":"How to create and share a custom Action in its own repository:","text":"<ol> <li> <p>Create a new local project folder    This folder should contain your action.yml file and all the code needed for your Action. Important: Do not put your action.yml or code inside a .github/actions folder or similar. Keep everything at the    root level of your new project folder.</p> </li> <li> <p>Initialize a Git repository    Run the following command inside your project folder:</p> </li> </ol> <p><code>git init</code></p> <ol> <li>Add and commit your files</li> </ol> <p><code>git add .</code></p> <p><code>git commit -m \"Initial commit for my custom Action\"</code></p> <ol> <li> <p>Create a GitHub repository    Create a new repository on GitHub to host your Action.</p> </li> <li> <p>Connect your local repo to GitHub remote</p> </li> </ol> <p><code>git remote add origin https://github.com/my-account/my-action.git</code></p> <ol> <li>Tag a release version    It's a good practice to tag your Action versions for reuse:</li> </ol> <p><code>git tag -a -m \"My action release\" v1</code></p> <ol> <li>Push your code and tags to GitHub</li> </ol> <p><code>git push --follow-tags origin main</code></p> <ol> <li>Use your custom Action in workflows    Reference your custom Action in any other workflow by specifying the repository and tag, like this:</li> </ol> <p><code>uses: my-account/my-action@v1</code></p>"},{"location":"kubernetes/kubectl/","title":"kubectl Command Reference","text":""},{"location":"kubernetes/kubectl/#get-resources","title":"Get Resources","text":"<ul> <li><code>kubectl get pods</code> \u2014 List pods</li> <li><code>kubectl get services</code> \u2014 List services</li> <li><code>kubectl get deployments</code> \u2014 List deployments</li> <li><code>kubectl get nodes</code> \u2014 List nodes</li> <li><code>kubectl get namespaces</code> \u2014 List namespaces</li> </ul>"},{"location":"kubernetes/kubectl/#describe-resources","title":"Describe Resources","text":"<ul> <li><code>kubectl describe pod &lt;pod-name&gt;</code></li> <li><code>kubectl describe node &lt;node-name&gt;</code></li> <li><code>kubectl describe deployment &lt;deployment-name&gt;</code></li> </ul>"},{"location":"kubernetes/kubectl/#logs-and-exec","title":"Logs and Exec","text":"<ul> <li><code>kubectl logs &lt;pod-name&gt;</code> \u2014 View logs of a pod</li> <li><code>kubectl exec -it &lt;pod-name&gt; -- /bin/bash</code> \u2014 Exec into a pod shell</li> </ul>"},{"location":"kubernetes/kubectl/#apply-and-delete","title":"Apply and Delete","text":"<ul> <li><code>kubectl apply -f &lt;file.yaml&gt;</code> \u2014 Apply config from file</li> <li><code>kubectl delete -f &lt;file.yaml&gt;</code> \u2014 Delete resources from file</li> </ul>"},{"location":"kubernetes/kubectl/#scaling-and-updating","title":"Scaling and Updating","text":"<ul> <li><code>kubectl scale deployment &lt;name&gt; --replicas=&lt;num&gt;</code> \u2014 Scale deployment</li> <li><code>kubectl rollout status deployment/&lt;name&gt;</code> \u2014 Check rollout status</li> <li><code>kubectl rollout undo deployment/&lt;name&gt;</code> \u2014 Rollback deployment</li> </ul>"},{"location":"kubernetes/kubectl/#miscellaneous","title":"Miscellaneous","text":"<ul> <li><code>kubectl config view</code> \u2014 Show kubeconfig</li> <li><code>kubectl config use-context &lt;context-name&gt;</code> \u2014 Switch context</li> <li><code>kubectl top pod</code> \u2014 Show pod resource usage (if metrics-server installed)  </li> </ul>"},{"location":"kubernetes/minikube/","title":"Minikube Usage &amp; Basic Commands","text":"<p>Minikube is a tool that makes it easy to run Kubernetes locally. Below are some commonly used Minikube commands with brief explanations.</p>"},{"location":"kubernetes/minikube/#installing-minikube","title":"Installing Minikube","text":"<pre><code>brew install minikube\n</code></pre> <ul> <li>Installs Minikube on macOS using Homebrew.</li> </ul>"},{"location":"kubernetes/minikube/#starting-minikube","title":"Starting Minikube","text":"<pre><code>minikube start --driver=docker\n</code></pre> <ul> <li>Starts a Minikube cluster using the Docker driver.</li> </ul>"},{"location":"kubernetes/minikube/#checking-minikube-status","title":"Checking Minikube Status","text":"<pre><code>minikube status\n</code></pre> <ul> <li>Shows the current status of the Minikube cluster.</li> </ul>"},{"location":"kubernetes/minikube/#stopping-minikube","title":"Stopping Minikube","text":"<pre><code>minikube stop\n</code></pre> <ul> <li>Stops the running Minikube cluster without deleting it.</li> </ul>"},{"location":"kubernetes/minikube/#deleting-minikube","title":"Deleting Minikube","text":"<pre><code>minikube delete\n</code></pre> <ul> <li>Deletes the Minikube cluster and all its data.</li> </ul>"},{"location":"kubernetes/minikube/#summary","title":"Summary","text":"Command Description <code>brew install minikube</code> Install Minikube <code>minikube start --driver=docker</code> Start Minikube with Docker driver <code>minikube status</code> Check the status of Minikube <code>minikube stop</code> Stop the Minikube cluster <code>minikube delete</code> Delete the Minikube cluster <p>For more details, visit the official documentation: https://minikube.sigs.k8s.io/docs/</p> <p>Note: Docker must be installed and running on your machine to use Minikube with the Docker driver.</p>"},{"location":"tools/apicurio-via-docker/","title":"Apicurio Installation via Docker","text":"<p>Apicurio Registry is an open-source registry for storing and retrieving API artifacts such as OpenAPI definitions, AsyncAPI definitions, Avro schemas, JSON Schema, and more. This guide explains how to install and run Apicurio (both backend and UI) using Docker.</p>"},{"location":"tools/apicurio-via-docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your system</li> <li>Ensure that ports 8080 (backend) and 8888 (UI) are free before starting</li> <li>You can check if a port is in use with:</li> </ul> <p>lsof -i:8080 lsof -i:8888</p>"},{"location":"tools/apicurio-via-docker/#step-1-install-docker-macos-example-with-homebrew","title":"Step 1 \u2014 Install Docker (MacOS example with Homebrew)","text":"<p><code>brew install docker</code></p>"},{"location":"tools/apicurio-via-docker/#step-2-run-the-backend","title":"Step 2 \u2014 Run the Backend","text":"<ol> <li> <p>Pull the Apicurio Registry backend image:    <code>docker pull apicurio/apicurio-registry:3.0.6</code></p> </li> <li> <p>Run the backend container:    <code>docker run -it -p 8080:8080 apicurio/apicurio-registry:3.0.6</code></p> </li> <li> <p>Open your browser and navigate to: http://localhost:8080/</p> </li> </ol>"},{"location":"tools/apicurio-via-docker/#step-3-run-the-ui","title":"Step 3 \u2014 Run the UI","text":"<ol> <li> <p>Pull the Apicurio Registry UI image:    <code>docker pull apicurio/apicurio-registry-ui:3.0.6</code></p> </li> <li> <p>Run the UI container:    <code>docker run -it -p 8888:8080 apicurio/apicurio-registry-ui:3.0.6</code></p> </li> <li> <p>Open your browser and navigate to: http://localhost:8888/</p> </li> </ol>"},{"location":"tools/apicurio-via-docker/#step-4-upload-and-validate-api-artifacts","title":"Step 4 \u2014 Upload and Validate API Artifacts","text":"<p>Once the UI is connected to the backend:</p> <ol> <li>Go to the UI (http://localhost:8888/)</li> <li>Use the Upload feature to add your API definition file (e.g., OpenAPI, Avro, JSON Schema).</li> <li>Explore detailed documentation, validation results, and example payloads.</li> </ol> <p>Note: Postman does not provide schema-level validation and example previews for these formats \u2014 using Apicurio UI is more powerful for this purpose.</p>"},{"location":"tools/apicurio-via-docker/#step-5-stopping-containers","title":"Step 5 \u2014 Stopping Containers","text":"<p>To stop the backend:</p> <p><code>docker ps</code>  # find the container ID for the backend <code>docker stop &lt;container_id&gt;</code></p> <p>To stop the UI:</p> <p><code>docker ps</code>  # find the container ID for the UI <code>docker stop &lt;container_id&gt;</code></p>"},{"location":"tools/kafkaui-via-docker/","title":"Local Kafka UI Setup with Docker","text":"<p>This guide explains how to set up and use Kafka UI locally with Docker for debugging and inspecting Kafka topics.</p>"},{"location":"tools/kafkaui-via-docker/#1-list-available-topics","title":"1. List Available Topics","text":"<p>To list the topics in a running Kafka cluster:</p> <pre><code>kafka-topics --bootstrap-server &lt;KAFKA_BOOTSTRAP_SERVER&gt; --list\n</code></pre> <p>Example:</p> <pre><code>kafka-topics --bootstrap-server my-cluster.kafka.local:9094 --list\n</code></pre>"},{"location":"tools/kafkaui-via-docker/#2-get-kafka-cluster-id","title":"2. Get Kafka Cluster ID","text":"<p>To retrieve the cluster ID of your local or remote Kafka cluster:</p> <pre><code>kafka-cluster cluster-id --bootstrap-server &lt;KAFKA_BOOTSTRAP_SERVER&gt;\n</code></pre> <p>Example:</p> <pre><code>kafka-cluster cluster-id --bootstrap-server my-cluster.kafka.local:9094\n</code></pre> <p>You will need this Cluster ID in the next step.</p>"},{"location":"tools/kafkaui-via-docker/#3-run-kafka-ui-with-docker","title":"3. Run Kafka UI with Docker","text":"<p>Run the Kafka UI Docker container, replacing <code>&lt;CLUSTER_ID&gt;</code> and <code>&lt;KAFKA_BOOTSTRAP_SERVER&gt;</code> with your values:</p> <pre><code>    docker run -d -p 8080:8080\n    -e KAFKA_CLUSTERS_0_NAME=&lt;CLUSTER_ID&gt;\n    -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=&lt;KAFKA_BOOTSTRAP_SERVER&gt;\n    provectuslabs/kafka-ui\n</code></pre> <p>Example:</p> <pre><code>    docker run -d -p 8080:8080\n    -e KAFKA_CLUSTERS_0_NAME=abcd1234ClusterId\n    -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=my-cluster.kafka.local:9094\n    provectuslabs/kafka-ui\n</code></pre>"},{"location":"tools/kafkaui-via-docker/#4-access-kafka-ui","title":"4. Access Kafka UI","text":"<p>Once the container is running, open your browser and navigate to:</p> <pre><code>http://localhost:8080\n</code></pre> <p>You will see the Kafka UI interface where you can:</p> <ul> <li>Browse topics</li> <li>View messages</li> <li>Manage consumer groups</li> <li>Inspect configurations</li> </ul>"},{"location":"tools/kafkaui-via-docker/#notes","title":"Notes","text":"<ul> <li>Docker must be installed and running on your local machine.</li> <li> <p>Ensure that port 8080 is not already in use. You can check by running:</p> <p>lsof -i:8080</p> </li> <li> <p>Replace placeholder values (<code>&lt;CLUSTER_ID&gt;</code> and <code>&lt;KAFKA_BOOTSTRAP_SERVER&gt;</code>) with actual values from your environment.</p> </li> </ul>"}]}